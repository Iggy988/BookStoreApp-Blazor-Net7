@page "/authors/"
@using BookStoreApp.Blazor.Server.UI.Models
@inject IAuthorService authorService
@inject IJSRuntime js

<h3>Authors</h3>
<br />

@if (response.Success == false)
{
    <div class="alert alert-info">
        <h4>@response.Message</h4>
    </div>
}
else
{
    @if (Authors == null)
    {
        <div class="alert alert-info">
            <h4>Loading Data...</h4>
        </div>
    }
    else
    {
        <AuthorizeView Roles="@Roles.Administrator">
            <a class="btn btn-dark" href="/authors/create"><span class="oi oi-plus" aria-hidden="true"></span> Create</a>
        </AuthorizeView>
        <br />
        <AuthorTable Authors="Authors" TotalSize="TotalSize" OnScroll="LoadAuthors"  />
        

        @* <table class="table table-responsive">
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var author in Authors)
                {
                    <tr>
                        <td>@author.FirstName</td>
                        <td>@author.LastName</td>
                        <td>
                            <a class="btn btn-primary" href="/authors/details/@author.Id"><span class="oi oi-book" aria-hidden="true"></span> Details</a>
                            <AuthorizeView Roles="@Roles.Administrator">
                                <a class="btn btn-warning" href="/authors/update/@author.Id"><span class="oi oi-pencil" aria-hidden="true"></span> Edit</a>
                                <button class="btn btn-danger" @onclick="@(()=> Delete(author.Id))"><span class="oi oi-delete" aria-hidden="true"></span> Delete</button>
                            </AuthorizeView>
                            
                        </td>
                    </tr>
                }
            </tbody>
        </table> *@
    }
}


@code {
    private List<AuthorReadOnlyDto> Authors;
    public int TotalSize{ get; set; }
    private Response<AuthorReadOnlyDtoVirtualizeResponse> response = new Response<AuthorReadOnlyDtoVirtualizeResponse> { Success = true };

    // protected override async Task OnInitializedAsync()
    // {
    //     //_model = (await httpClient.AuthorsAllAsync()).ToList();
    //     response = await authorService.Get();
    //     if (response.Success)
    //     {
    //         Authors = response.Data;
    //     }
    // }
    protected override async Task OnInitializedAsync()
    {
        response = await authorService.Get(new QueryParameters { StartIndex = 0 });
        if (response.Success)
        {
            Authors = response.Data.Items.ToList();
        }
    }
    private async Task LoadAuthors(QueryParameters queryParams)
    {
        var virtualizeResult = await authorService.Get(queryParams);
        Authors = virtualizeResult.Data.Items.ToList();
        TotalSize = virtualizeResult.Data.TotalSize;
    }

    private async Task Delete(int authorId)
    {
        var author = Authors.First(q => q.Id == authorId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Are You Sure You Want To Delete {author.FirstName} {author.LastName}?");
        
        if (confirm)
        {
            var response = await authorService.Delete(authorId);
            if (response.Success)
            {
                await OnInitializedAsync();
            }
        }
        
    }
}
